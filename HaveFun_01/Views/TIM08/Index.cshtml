@{
    ViewData["Title"] = "TIM08";
}

<title>@ViewData["Title"]</title>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>
</head>

<body>
    <div id="app">
        <div class="container">
            <div class="row">
                <div class="col-4">
                    <!-- Some borders are removed -->
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">
                            <div>商品名稱</div>
                            <div>
                                <input class="form-control" type="text" v-model="search.productName">
                            </div>
                        </li>
                        <li class="list-group-item">
                            <div>價錢區間</div>
                            <div class="row">
                                <div class="col-5 form-group">
                                    <input class="form-control" type="number" v-model="search.price.min">
                                </div>
                                <div class="col-2">
                                    ~~
                                </div>
                                <div class="col-5  form-group">
                                    <input class="form-control" type="number" v-model="search.price.max">
                                </div>
                            </div>
                        </li>
                        <li class="list-group-item">
                            <label for="inputState" class="form-label">地區</label>
                            <select id="inputState" class="form-select" v-model="search.region">
                                <option selected value="">Choose...</option>
                                <option v-for="item in getRegionList" :value="item">{{item}}</option>
                            </select>
                        </li>
                    </ul>

                </div>
                <div class="col-8">
                    <div class="table-responsive">
                        <table class="table table-primary">
                            <thead>
                                <tr>
                                    <th scope="col">產品名稱</th>
                                    <th scope="col">價錢</th>
                                    <th scope="col">地區</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="" v-for="p in filterRegion">
                                    <td scope="row">{{p.product}}</td>
                                    <td>{{p.price}}</td>
                                    <td>{{p.region}}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>
        </div>
    </div>
</body>
<script>
    const app = Vue.createApp({
        data() {
            return {
                search: {
                    productName: "",
                    price: {
                        min: "",
                        max: ""
                    },
                    region:""
                },
                products: [
                    {
                        product: "Laptop",
                        price: 999.99,
                        region: "North America"
                    },
                    {
                        product: "Smartphone",
                        price: 699.99,
                        region: "Europe"
                    },
                    {
                        product: "Tablet",
                        price: 399.99,
                        region: "Asia"
                    },
                    {
                        product: "Smartwatch",
                        price: 199.99,
                        region: "South America"
                    },
                    {
                        product: "Headphones",
                        price: 149.99,
                        region: "Africa"
                    },
                    {
                        product: "Camera",
                        price: 499.99,
                        region: "Australia"
                    },
                    {
                        product: "Printer",
                        price: 299.99,
                        region: "North America"
                    },
                    {
                        product: "Monitor",
                        price: 249.99,
                        region: "Europe"
                    },
                    {
                        product: "Keyboard",
                        price: 99.99,
                        region: "Asia"
                    },
                    {
                        product: "Mouse",
                        price: 49.99,
                        region: "South America"
                    }
                ]
            }
        },
        computed: {
            getRegionList() {
                let m = new Map()
                for (let item of this.products.map(x => x.region)) {
                    m.set(item, item)
                }
                let arr = [];
                for (let [x, y] of m.entries()) {
                    arr.push(x);
                }
                return arr;
            },
            filterName() {
                return this.products.filter(x => x.product.toUpperCase().includes(this.search.productName.toUpperCase()));
            },
            filterPrice() {
                var temp = this.filterName;
                if (this.search.price.min != "") {
                    temp = temp.filter(x => x.price > this.search.price.min);
                }
                if (this.search.price.max != "") {
                    temp = temp.filter(x => x.price < this.search.price.max);
                }
                return temp;

            },
            filterRegion() {
                if(this.search.region != ""){
                    return this.filterPrice.filter(x => x.region == this.search.region);
                }
                return this.filterPrice;

            },
            upperStr() {
                console.log("computed")
                return JSON.stringify(this.text);
            }
        },
        methods: {
            toUpper(str) {
                console.log("methods")
                return JSON.stringify(this.text);
            }
        }
    })
        .mount("#app")
</script>
